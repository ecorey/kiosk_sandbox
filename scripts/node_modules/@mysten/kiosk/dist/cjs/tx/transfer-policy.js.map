{
  "version": 3,
  "sources": ["../../../src/tx/transfer-policy.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui.js/bcs';\nimport type {\n\tTransactionArgument,\n\tTransactionBlock,\n\tTransactionObjectArgument,\n} from '@mysten/sui.js/transactions';\n\nimport type { ObjectArgument } from '../types/index.js';\nimport { TRANSFER_POLICY_MODULE, TRANSFER_POLICY_TYPE } from '../types/index.js';\n\n/**\n * Call the `transfer_policy::new` function to create a new transfer policy.\n * Returns `transferPolicyCap`\n */\nexport function createTransferPolicy(\n\ttx: TransactionBlock,\n\titemType: string,\n\tpublisher: ObjectArgument,\n): TransactionObjectArgument {\n\tconst [transferPolicy, transferPolicyCap] = createTransferPolicyWithoutSharing(\n\t\ttx,\n\t\titemType,\n\t\tpublisher,\n\t);\n\n\tshareTransferPolicy(tx, itemType, transferPolicy);\n\n\treturn transferPolicyCap;\n}\n\n/**\n * Creates a transfer Policy and returns both the Policy and the Cap.\n * Used if we want to use the policy before making it a shared object.\n */\nexport function createTransferPolicyWithoutSharing(\n\ttx: TransactionBlock,\n\titemType: string,\n\tpublisher: ObjectArgument,\n): [TransactionObjectArgument, TransactionObjectArgument] {\n\tconst [transferPolicy, transferPolicyCap] = tx.moveCall({\n\t\ttarget: `${TRANSFER_POLICY_MODULE}::new`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [tx.object(publisher)],\n\t});\n\n\treturn [transferPolicy, transferPolicyCap];\n}\n/**\n * Converts Transfer Policy to a shared object.\n */\nexport function shareTransferPolicy(\n\ttx: TransactionBlock,\n\titemType: string,\n\ttransferPolicy: TransactionObjectArgument,\n) {\n\ttx.moveCall({\n\t\ttarget: `0x2::transfer::public_share_object`,\n\t\ttypeArguments: [`${TRANSFER_POLICY_TYPE}<${itemType}>`],\n\t\targuments: [transferPolicy],\n\t});\n}\n\n/**\n * Call the `transfer_policy::withdraw` function to withdraw profits from a transfer policy.\n */\nexport function withdrawFromPolicy(\n\ttx: TransactionBlock,\n\titemType: string,\n\tpolicy: ObjectArgument,\n\tpolicyCap: ObjectArgument,\n\tamount?: string | bigint | null,\n): TransactionObjectArgument {\n\tconst amountArg = bcs.option(bcs.u64()).serialize(amount);\n\n\tconst [profits] = tx.moveCall({\n\t\ttarget: `${TRANSFER_POLICY_MODULE}::withdraw`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [tx.object(policy), tx.object(policyCap), amountArg],\n\t});\n\n\treturn profits;\n}\n\n/**\n * Call the `transfer_policy::confirm_request` function to unblock the\n * transaction.\n */\nexport function confirmRequest(\n\ttx: TransactionBlock,\n\titemType: string,\n\tpolicy: ObjectArgument,\n\trequest: TransactionArgument,\n): void {\n\ttx.moveCall({\n\t\ttarget: `${TRANSFER_POLICY_MODULE}::confirm_request`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [tx.object(policy), request],\n\t});\n}\n\n/**\n * Calls the `transfer_policy::remove_rule` function to remove a Rule from the transfer policy's ruleset.\n */\nexport function removeTransferPolicyRule(\n\ttx: TransactionBlock,\n\titemType: string,\n\truleType: string,\n\tconfigType: string,\n\tpolicy: ObjectArgument,\n\tpolicyCap: ObjectArgument,\n): void {\n\ttx.moveCall({\n\t\ttarget: `${TRANSFER_POLICY_MODULE}::remove_rule`,\n\t\ttypeArguments: [itemType, ruleType, configType],\n\t\targuments: [tx.object(policy), tx.object(policyCap)],\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAoB;AAQpB,mBAA6D;AAMtD,SAAS,qBACf,IACA,UACA,WAC4B;AAC5B,QAAM,CAAC,gBAAgB,iBAAiB,IAAI;AAAA,IAC3C;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,sBAAoB,IAAI,UAAU,cAAc;AAEhD,SAAO;AACR;AAMO,SAAS,mCACf,IACA,UACA,WACyD;AACzD,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,GAAG,SAAS;AAAA,IACvD,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,GAAG,OAAO,SAAS,CAAC;AAAA,EACjC,CAAC;AAED,SAAO,CAAC,gBAAgB,iBAAiB;AAC1C;AAIO,SAAS,oBACf,IACA,UACA,gBACC;AACD,KAAG,SAAS;AAAA,IACX,QAAQ;AAAA,IACR,eAAe,CAAC,GAAG,qCAAwB,WAAW;AAAA,IACtD,WAAW,CAAC,cAAc;AAAA,EAC3B,CAAC;AACF;AAKO,SAAS,mBACf,IACA,UACA,QACA,WACA,QAC4B;AAC5B,QAAM,YAAY,eAAI,OAAO,eAAI,IAAI,CAAC,EAAE,UAAU,MAAM;AAExD,QAAM,CAAC,OAAO,IAAI,GAAG,SAAS;AAAA,IAC7B,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,GAAG,OAAO,MAAM,GAAG,GAAG,OAAO,SAAS,GAAG,SAAS;AAAA,EAC/D,CAAC;AAED,SAAO;AACR;AAMO,SAAS,eACf,IACA,UACA,QACA,SACO;AACP,KAAG,SAAS;AAAA,IACX,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,GAAG,OAAO,MAAM,GAAG,OAAO;AAAA,EACvC,CAAC;AACF;AAKO,SAAS,yBACf,IACA,UACA,UACA,YACA,QACA,WACO;AACP,KAAG,SAAS;AAAA,IACX,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,UAAU,UAAU,UAAU;AAAA,IAC9C,WAAW,CAAC,GAAG,OAAO,MAAM,GAAG,GAAG,OAAO,SAAS,CAAC;AAAA,EACpD,CAAC;AACF;",
  "names": []
}
