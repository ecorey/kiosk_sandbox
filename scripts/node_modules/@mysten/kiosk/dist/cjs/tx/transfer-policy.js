"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transfer_policy_exports = {};
__export(transfer_policy_exports, {
  confirmRequest: () => confirmRequest,
  createTransferPolicy: () => createTransferPolicy,
  createTransferPolicyWithoutSharing: () => createTransferPolicyWithoutSharing,
  removeTransferPolicyRule: () => removeTransferPolicyRule,
  shareTransferPolicy: () => shareTransferPolicy,
  withdrawFromPolicy: () => withdrawFromPolicy
});
module.exports = __toCommonJS(transfer_policy_exports);
var import_bcs = require("@mysten/sui.js/bcs");
var import_types = require("../types/index.js");
function createTransferPolicy(tx, itemType, publisher) {
  const [transferPolicy, transferPolicyCap] = createTransferPolicyWithoutSharing(
    tx,
    itemType,
    publisher
  );
  shareTransferPolicy(tx, itemType, transferPolicy);
  return transferPolicyCap;
}
function createTransferPolicyWithoutSharing(tx, itemType, publisher) {
  const [transferPolicy, transferPolicyCap] = tx.moveCall({
    target: `${import_types.TRANSFER_POLICY_MODULE}::new`,
    typeArguments: [itemType],
    arguments: [tx.object(publisher)]
  });
  return [transferPolicy, transferPolicyCap];
}
function shareTransferPolicy(tx, itemType, transferPolicy) {
  tx.moveCall({
    target: `0x2::transfer::public_share_object`,
    typeArguments: [`${import_types.TRANSFER_POLICY_TYPE}<${itemType}>`],
    arguments: [transferPolicy]
  });
}
function withdrawFromPolicy(tx, itemType, policy, policyCap, amount) {
  const amountArg = import_bcs.bcs.option(import_bcs.bcs.u64()).serialize(amount);
  const [profits] = tx.moveCall({
    target: `${import_types.TRANSFER_POLICY_MODULE}::withdraw`,
    typeArguments: [itemType],
    arguments: [tx.object(policy), tx.object(policyCap), amountArg]
  });
  return profits;
}
function confirmRequest(tx, itemType, policy, request) {
  tx.moveCall({
    target: `${import_types.TRANSFER_POLICY_MODULE}::confirm_request`,
    typeArguments: [itemType],
    arguments: [tx.object(policy), request]
  });
}
function removeTransferPolicyRule(tx, itemType, ruleType, configType, policy, policyCap) {
  tx.moveCall({
    target: `${import_types.TRANSFER_POLICY_MODULE}::remove_rule`,
    typeArguments: [itemType, ruleType, configType],
    arguments: [tx.object(policy), tx.object(policyCap)]
  });
}
//# sourceMappingURL=transfer-policy.js.map
