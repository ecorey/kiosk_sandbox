{
  "version": 3,
  "sources": ["../../../../src/tx/rules/resolve.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { RuleResolvingParams } from '../../types/index.js';\nimport { lock } from '../kiosk.js';\n\n/**\n * A helper to resolve the royalty rule.\n */\nexport function resolveRoyaltyRule(params: RuleResolvingParams) {\n\tconst { transactionBlock: txb, itemType, price, packageId, transferRequest, policyId } = params;\n\n\tconst policyObj = txb.object(policyId);\n\n\t// calculates the amount\n\tconst [amount] = txb.moveCall({\n\t\ttarget: `${packageId}::royalty_rule::fee_amount`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [policyObj, txb.pure.u64(price || '0')],\n\t});\n\n\t// splits the coin.\n\tconst feeCoin = txb.splitCoins(txb.gas, [amount]);\n\n\t// pays the policy\n\ttxb.moveCall({\n\t\ttarget: `${packageId}::royalty_rule::pay`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [policyObj, transferRequest, feeCoin],\n\t});\n}\n\nexport function resolveKioskLockRule(params: RuleResolvingParams) {\n\tconst {\n\t\ttransactionBlock: txb,\n\t\tpackageId,\n\t\titemType,\n\t\tkiosk,\n\t\tkioskCap,\n\t\tpolicyId,\n\t\tpurchasedItem,\n\t\ttransferRequest,\n\t} = params;\n\n\tif (!kiosk || !kioskCap) throw new Error('Missing Owned Kiosk or Owned Kiosk Cap');\n\n\tlock(txb, itemType, kiosk, kioskCap, policyId, purchasedItem);\n\n\t// proves that the item is locked in the kiosk to the TP.\n\ttxb.moveCall({\n\t\ttarget: `${packageId}::kiosk_lock_rule::prove`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [transferRequest, txb.object(kiosk)],\n\t});\n}\n\n/**\n * A helper to resolve the personalKioskRule.\n * @param params\n */\nexport function resolvePersonalKioskRule(params: RuleResolvingParams) {\n\tconst { transactionBlock: txb, packageId, itemType, kiosk, transferRequest } = params;\n\n\tif (!kiosk) throw new Error('Missing owned Kiosk.');\n\n\t// proves that the destination kiosk is personal.\n\ttxb.moveCall({\n\t\ttarget: `${packageId}::personal_kiosk_rule::prove`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [txb.object(kiosk), transferRequest],\n\t});\n}\n\n/**\n * Resolves the floor price rule.\n */\nexport function resolveFloorPriceRule(params: RuleResolvingParams) {\n\tconst { transactionBlock: txb, packageId, itemType, policyId, transferRequest } = params;\n\n\t// proves that the destination kiosk is personal\n\ttxb.moveCall({\n\t\ttarget: `${packageId}::floor_price_rule::prove`,\n\t\ttypeArguments: [itemType],\n\t\targuments: [txb.object(policyId), transferRequest],\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,mBAAqB;AAKd,SAAS,mBAAmB,QAA6B;AAC/D,QAAM,EAAE,kBAAkB,KAAK,UAAU,OAAO,WAAW,iBAAiB,SAAS,IAAI;AAEzF,QAAM,YAAY,IAAI,OAAO,QAAQ;AAGrC,QAAM,CAAC,MAAM,IAAI,IAAI,SAAS;AAAA,IAC7B,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,WAAW,IAAI,KAAK,IAAI,SAAS,GAAG,CAAC;AAAA,EAClD,CAAC;AAGD,QAAM,UAAU,IAAI,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC;AAGhD,MAAI,SAAS;AAAA,IACZ,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,WAAW,iBAAiB,OAAO;AAAA,EAChD,CAAC;AACF;AAEO,SAAS,qBAAqB,QAA6B;AACjE,QAAM;AAAA,IACL,kBAAkB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD,IAAI;AAEJ,MAAI,CAAC,SAAS,CAAC;AAAU,UAAM,IAAI,MAAM,wCAAwC;AAEjF,yBAAK,KAAK,UAAU,OAAO,UAAU,UAAU,aAAa;AAG5D,MAAI,SAAS;AAAA,IACZ,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,iBAAiB,IAAI,OAAO,KAAK,CAAC;AAAA,EAC/C,CAAC;AACF;AAMO,SAAS,yBAAyB,QAA6B;AACrE,QAAM,EAAE,kBAAkB,KAAK,WAAW,UAAU,OAAO,gBAAgB,IAAI;AAE/E,MAAI,CAAC;AAAO,UAAM,IAAI,MAAM,sBAAsB;AAGlD,MAAI,SAAS;AAAA,IACZ,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,IAAI,OAAO,KAAK,GAAG,eAAe;AAAA,EAC/C,CAAC;AACF;AAKO,SAAS,sBAAsB,QAA6B;AAClE,QAAM,EAAE,kBAAkB,KAAK,WAAW,UAAU,UAAU,gBAAgB,IAAI;AAGlF,MAAI,SAAS;AAAA,IACZ,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,IAAI,OAAO,QAAQ,GAAG,eAAe;AAAA,EAClD,CAAC;AACF;",
  "names": []
}
