"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var resolve_exports = {};
__export(resolve_exports, {
  resolveFloorPriceRule: () => resolveFloorPriceRule,
  resolveKioskLockRule: () => resolveKioskLockRule,
  resolvePersonalKioskRule: () => resolvePersonalKioskRule,
  resolveRoyaltyRule: () => resolveRoyaltyRule
});
module.exports = __toCommonJS(resolve_exports);
var import_kiosk = require("../kiosk.js");
function resolveRoyaltyRule(params) {
  const { transactionBlock: txb, itemType, price, packageId, transferRequest, policyId } = params;
  const policyObj = txb.object(policyId);
  const [amount] = txb.moveCall({
    target: `${packageId}::royalty_rule::fee_amount`,
    typeArguments: [itemType],
    arguments: [policyObj, txb.pure.u64(price || "0")]
  });
  const feeCoin = txb.splitCoins(txb.gas, [amount]);
  txb.moveCall({
    target: `${packageId}::royalty_rule::pay`,
    typeArguments: [itemType],
    arguments: [policyObj, transferRequest, feeCoin]
  });
}
function resolveKioskLockRule(params) {
  const {
    transactionBlock: txb,
    packageId,
    itemType,
    kiosk,
    kioskCap,
    policyId,
    purchasedItem,
    transferRequest
  } = params;
  if (!kiosk || !kioskCap)
    throw new Error("Missing Owned Kiosk or Owned Kiosk Cap");
  (0, import_kiosk.lock)(txb, itemType, kiosk, kioskCap, policyId, purchasedItem);
  txb.moveCall({
    target: `${packageId}::kiosk_lock_rule::prove`,
    typeArguments: [itemType],
    arguments: [transferRequest, txb.object(kiosk)]
  });
}
function resolvePersonalKioskRule(params) {
  const { transactionBlock: txb, packageId, itemType, kiosk, transferRequest } = params;
  if (!kiosk)
    throw new Error("Missing owned Kiosk.");
  txb.moveCall({
    target: `${packageId}::personal_kiosk_rule::prove`,
    typeArguments: [itemType],
    arguments: [txb.object(kiosk), transferRequest]
  });
}
function resolveFloorPriceRule(params) {
  const { transactionBlock: txb, packageId, itemType, policyId, transferRequest } = params;
  txb.moveCall({
    target: `${packageId}::floor_price_rule::prove`,
    typeArguments: [itemType],
    arguments: [txb.object(policyId), transferRequest]
  });
}
//# sourceMappingURL=resolve.js.map
