"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var attach_exports = {};
__export(attach_exports, {
  attachFloorPriceRuleTx: () => attachFloorPriceRuleTx,
  attachKioskLockRuleTx: () => attachKioskLockRuleTx,
  attachPersonalKioskRuleTx: () => attachPersonalKioskRuleTx,
  attachRoyaltyRuleTx: () => attachRoyaltyRuleTx
});
module.exports = __toCommonJS(attach_exports);
function attachKioskLockRuleTx(tx, type, policy, policyCap, packageId) {
  tx.moveCall({
    target: `${packageId}::kiosk_lock_rule::add`,
    typeArguments: [type],
    arguments: [tx.object(policy), tx.object(policyCap)]
  });
}
function attachRoyaltyRuleTx(tx, type, policy, policyCap, percentageBps, minAmount, packageId) {
  if (Number(percentageBps) < 0 || Number(percentageBps) > 1e4)
    throw new Error("Invalid basis point percentage. Use a value between [0,10000].");
  tx.moveCall({
    target: `${packageId}::royalty_rule::add`,
    typeArguments: [type],
    arguments: [
      tx.object(policy),
      tx.object(policyCap),
      tx.pure.u16(Number(percentageBps)),
      tx.pure.u64(minAmount)
    ]
  });
}
function attachPersonalKioskRuleTx(tx, type, policy, policyCap, packageId) {
  tx.moveCall({
    target: `${packageId}::personal_kiosk_rule::add`,
    typeArguments: [type],
    arguments: [tx.object(policy), tx.object(policyCap)]
  });
}
function attachFloorPriceRuleTx(tx, type, policy, policyCap, minPrice, packageId) {
  tx.moveCall({
    target: `${packageId}::floor_price_rule::add`,
    typeArguments: [type],
    arguments: [tx.object(policy), tx.object(policyCap), tx.pure.u64(minPrice)]
  });
}
//# sourceMappingURL=attach.js.map
