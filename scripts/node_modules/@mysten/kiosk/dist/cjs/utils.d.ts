import type { DynamicFieldInfo, PaginationArguments, SuiClient, SuiObjectData, SuiObjectDataFilter, SuiObjectDataOptions, SuiObjectResponse } from '@mysten/sui.js/client';
import type { Kiosk, KioskData, KioskListing, TransferPolicyCap } from './types/index.js';
export declare function getKioskObject(client: SuiClient, id: string): Promise<Kiosk>;
export declare function extractKioskData(data: DynamicFieldInfo[], listings: KioskListing[], lockedItemIds: string[], kioskId: string): KioskData;
/**
 * A helper that attaches the listing prices to kiosk listings.
 */
export declare function attachListingsAndPrices(kioskData: KioskData, listings: KioskListing[], listingObjects: SuiObjectResponse[]): void;
/**
 * A helper that attaches the listing prices to kiosk listings.
 */
export declare function attachObjects(kioskData: KioskData, objects: SuiObjectData[]): void;
/**
 * A Helper to attach locked state to items in Kiosk Data.
 */
export declare function attachLockedItems(kioskData: KioskData, lockedItemIds: string[]): void;
/**
 * A helper to fetch all DF pages.
 * We need that to fetch the kiosk DFs consistently, until we have
 * RPC calls that allow filtering of Type / batch fetching of spec
 */
export declare function getAllDynamicFields(client: SuiClient, parentId: string, pagination: PaginationArguments<string>): Promise<DynamicFieldInfo[]>;
/**
 * A helper to fetch all objects that works with pagination.
 * It will fetch all objects in the array, and limit it to 50/request.
 * Requests are sent using `Promise.all`.
 */
export declare function getAllObjects(client: SuiClient, ids: string[], options: SuiObjectDataOptions, limit?: number): Promise<SuiObjectResponse[]>;
/**
 * A helper to return all owned objects, with an optional filter.
 * It parses all the pages and returns the data.
 */
export declare function getAllOwnedObjects({ client, owner, filter, limit, options, }: {
    client: SuiClient;
    owner: string;
    filter?: SuiObjectDataFilter;
    options?: SuiObjectDataOptions;
    limit?: number;
}): Promise<SuiObjectResponse[]>;
/**
 * Converts a number to basis points.
 * Supports up to 2 decimal points.
 * E.g 9.95 -> 995
 * @param percentage A percentage amount in the range [0, 100] including decimals.
 */
export declare function percentageToBasisPoints(percentage: number): number;
/**
 * A helper to parse a transfer policy Cap into a usable object.
 */
export declare function parseTransferPolicyCapObject(item: SuiObjectResponse): TransferPolicyCap | undefined;
export declare function getNormalizedRuleType(rule: string): string;
