{
  "version": 3,
  "sources": ["../../../src/query/transfer-policy.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SuiClient } from '@mysten/sui.js/client';\nimport { isValidSuiAddress } from '@mysten/sui.js/utils';\n\nimport { bcs } from '../bcs.js';\nimport type { TransferPolicy, TransferPolicyCap } from '../types/index.js';\nimport {\n\tTRANSFER_POLICY_CAP_TYPE,\n\tTRANSFER_POLICY_CREATED_EVENT,\n\tTRANSFER_POLICY_TYPE,\n} from '../types/index.js';\nimport { getAllOwnedObjects, parseTransferPolicyCapObject } from '../utils.js';\n\n/**\n * Searches the `TransferPolicy`-s for the given type. The seach is performed via\n * the `TransferPolicyCreated` event. The policy can either be owned or shared,\n * and the caller needs to filter the results accordingly (ie single owner can not\n * be accessed by anyone but the owner).\n *\n * @param provider\n * @param type\n */\nexport async function queryTransferPolicy(\n\tclient: SuiClient,\n\ttype: string,\n): Promise<TransferPolicy[]> {\n\t// console.log('event type: %s', `${TRANSFER_POLICY_CREATED_EVENT}<${type}>`);\n\tconst { data } = await client.queryEvents({\n\t\tquery: {\n\t\t\tMoveEventType: `${TRANSFER_POLICY_CREATED_EVENT}<${type}>`,\n\t\t},\n\t});\n\n\tconst search = data.map((event) => event.parsedJson as { id: string });\n\tconst policies = await client.multiGetObjects({\n\t\tids: search.map((policy) => policy.id),\n\t\toptions: { showBcs: true, showOwner: true },\n\t});\n\n\treturn policies\n\t\t.filter((policy) => !!policy && 'data' in policy)\n\t\t.map(({ data: policy }) => {\n\t\t\t// should never happen; policies are objects and fetched via an event.\n\t\t\t// policies are filtered for null and undefined above.\n\t\t\tif (!policy || !policy.bcs || !('bcsBytes' in policy.bcs)) {\n\t\t\t\tthrow new Error(`Invalid policy: ${policy?.objectId}, expected object, got package`);\n\t\t\t}\n\n\t\t\tconst parsed = bcs.de(TRANSFER_POLICY_TYPE, policy.bcs.bcsBytes, 'base64');\n\n\t\t\treturn {\n\t\t\t\tid: policy?.objectId,\n\t\t\t\ttype: `${TRANSFER_POLICY_TYPE}<${type}>`,\n\t\t\t\towner: policy?.owner!,\n\t\t\t\trules: parsed.rules,\n\t\t\t\tbalance: parsed.balance,\n\t\t\t} as TransferPolicy;\n\t\t});\n}\n\n/**\n * A function to fetch all the user's kiosk Caps\n * And a list of the kiosk address ids.\n * Returns a list of `kioskOwnerCapIds` and `kioskIds`.\n * Extra options allow pagination.\n * @returns TransferPolicyCap Object ID | undefined if not found.\n */\nexport async function queryTransferPolicyCapsByType(\n\tclient: SuiClient,\n\taddress: string,\n\ttype: string,\n): Promise<TransferPolicyCap[]> {\n\tif (!isValidSuiAddress(address)) return [];\n\n\tconst filter = {\n\t\tMatchAll: [\n\t\t\t{\n\t\t\t\tStructType: `${TRANSFER_POLICY_CAP_TYPE}<${type}>`,\n\t\t\t},\n\t\t],\n\t};\n\n\t// fetch owned kiosk caps, paginated.\n\tconst data = await getAllOwnedObjects({\n\t\tclient,\n\t\tfilter,\n\t\towner: address,\n\t});\n\n\treturn data\n\t\t.map((item) => parseTransferPolicyCapObject(item))\n\t\t.filter((item) => !!item) as TransferPolicyCap[];\n}\n\n/**\n * A function to fetch all the user's kiosk Caps\n * And a list of the kiosk address ids.\n * Returns a list of `kioskOwnerCapIds` and `kioskIds`.\n * Extra options allow pagination.\n * @returns TransferPolicyCap Object ID | undefined if not found.\n */\nexport async function queryOwnedTransferPolicies(\n\tclient: SuiClient,\n\taddress: string,\n): Promise<TransferPolicyCap[] | undefined> {\n\tif (!isValidSuiAddress(address)) return;\n\n\tconst filter = {\n\t\tMatchAll: [\n\t\t\t{\n\t\t\t\tMoveModule: {\n\t\t\t\t\tmodule: 'transfer_policy',\n\t\t\t\t\tpackage: '0x2',\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\t// fetch all owned kiosk caps, paginated.\n\tconst data = await getAllOwnedObjects({ client, owner: address, filter });\n\n\tconst policies: TransferPolicyCap[] = [];\n\n\tfor (const item of data) {\n\t\tconst data = parseTransferPolicyCapObject(item);\n\t\tif (data) policies.push(data);\n\t}\n\n\treturn policies;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,mBAAkC;AAElC,iBAAoB;AAEpB,mBAIO;AACP,IAAAA,gBAAiE;AAWjE,eAAsB,oBACrB,QACA,MAC4B;AAE5B,QAAM,EAAE,KAAK,IAAI,MAAM,OAAO,YAAY;AAAA,IACzC,OAAO;AAAA,MACN,eAAe,GAAG,8CAAiC;AAAA,IACpD;AAAA,EACD,CAAC;AAED,QAAM,SAAS,KAAK,IAAI,CAAC,UAAU,MAAM,UAA4B;AACrE,QAAM,WAAW,MAAM,OAAO,gBAAgB;AAAA,IAC7C,KAAK,OAAO,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IACrC,SAAS,EAAE,SAAS,MAAM,WAAW,KAAK;AAAA,EAC3C,CAAC;AAED,SAAO,SACL,OAAO,CAAC,WAAW,CAAC,CAAC,UAAU,UAAU,MAAM,EAC/C,IAAI,CAAC,EAAE,MAAM,OAAO,MAAM;AAG1B,QAAI,CAAC,UAAU,CAAC,OAAO,OAAO,EAAE,cAAc,OAAO,MAAM;AAC1D,YAAM,IAAI,MAAM,mBAAmB,QAAQ,wCAAwC;AAAA,IACpF;AAEA,UAAM,SAAS,eAAI,GAAG,mCAAsB,OAAO,IAAI,UAAU,QAAQ;AAEzE,WAAO;AAAA,MACN,IAAI,QAAQ;AAAA,MACZ,MAAM,GAAG,qCAAwB;AAAA,MACjC,OAAO,QAAQ;AAAA,MACf,OAAO,OAAO;AAAA,MACd,SAAS,OAAO;AAAA,IACjB;AAAA,EACD,CAAC;AACH;AASA,eAAsB,8BACrB,QACA,SACA,MAC+B;AAC/B,MAAI,KAAC,gCAAkB,OAAO;AAAG,WAAO,CAAC;AAEzC,QAAM,SAAS;AAAA,IACd,UAAU;AAAA,MACT;AAAA,QACC,YAAY,GAAG,yCAA4B;AAAA,MAC5C;AAAA,IACD;AAAA,EACD;AAGA,QAAM,OAAO,UAAM,kCAAmB;AAAA,IACrC;AAAA,IACA;AAAA,IACA,OAAO;AAAA,EACR,CAAC;AAED,SAAO,KACL,IAAI,CAAC,aAAS,4CAA6B,IAAI,CAAC,EAChD,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI;AAC1B;AASA,eAAsB,2BACrB,QACA,SAC2C;AAC3C,MAAI,KAAC,gCAAkB,OAAO;AAAG;AAEjC,QAAM,SAAS;AAAA,IACd,UAAU;AAAA,MACT;AAAA,QACC,YAAY;AAAA,UACX,QAAQ;AAAA,UACR,SAAS;AAAA,QACV;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAGA,QAAM,OAAO,UAAM,kCAAmB,EAAE,QAAQ,OAAO,SAAS,OAAO,CAAC;AAExE,QAAM,WAAgC,CAAC;AAEvC,aAAW,QAAQ,MAAM;AACxB,UAAMC,YAAO,4CAA6B,IAAI;AAC9C,QAAIA;AAAM,eAAS,KAAKA,KAAI;AAAA,EAC7B;AAEA,SAAO;AACR;",
  "names": ["import_utils", "data"]
}
