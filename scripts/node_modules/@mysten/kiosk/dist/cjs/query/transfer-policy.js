"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transfer_policy_exports = {};
__export(transfer_policy_exports, {
  queryOwnedTransferPolicies: () => queryOwnedTransferPolicies,
  queryTransferPolicy: () => queryTransferPolicy,
  queryTransferPolicyCapsByType: () => queryTransferPolicyCapsByType
});
module.exports = __toCommonJS(transfer_policy_exports);
var import_utils = require("@mysten/sui.js/utils");
var import_bcs = require("../bcs.js");
var import_types = require("../types/index.js");
var import_utils2 = require("../utils.js");
async function queryTransferPolicy(client, type) {
  const { data } = await client.queryEvents({
    query: {
      MoveEventType: `${import_types.TRANSFER_POLICY_CREATED_EVENT}<${type}>`
    }
  });
  const search = data.map((event) => event.parsedJson);
  const policies = await client.multiGetObjects({
    ids: search.map((policy) => policy.id),
    options: { showBcs: true, showOwner: true }
  });
  return policies.filter((policy) => !!policy && "data" in policy).map(({ data: policy }) => {
    if (!policy || !policy.bcs || !("bcsBytes" in policy.bcs)) {
      throw new Error(`Invalid policy: ${policy?.objectId}, expected object, got package`);
    }
    const parsed = import_bcs.bcs.de(import_types.TRANSFER_POLICY_TYPE, policy.bcs.bcsBytes, "base64");
    return {
      id: policy?.objectId,
      type: `${import_types.TRANSFER_POLICY_TYPE}<${type}>`,
      owner: policy?.owner,
      rules: parsed.rules,
      balance: parsed.balance
    };
  });
}
async function queryTransferPolicyCapsByType(client, address, type) {
  if (!(0, import_utils.isValidSuiAddress)(address))
    return [];
  const filter = {
    MatchAll: [
      {
        StructType: `${import_types.TRANSFER_POLICY_CAP_TYPE}<${type}>`
      }
    ]
  };
  const data = await (0, import_utils2.getAllOwnedObjects)({
    client,
    filter,
    owner: address
  });
  return data.map((item) => (0, import_utils2.parseTransferPolicyCapObject)(item)).filter((item) => !!item);
}
async function queryOwnedTransferPolicies(client, address) {
  if (!(0, import_utils.isValidSuiAddress)(address))
    return;
  const filter = {
    MatchAll: [
      {
        MoveModule: {
          module: "transfer_policy",
          package: "0x2"
        }
      }
    ]
  };
  const data = await (0, import_utils2.getAllOwnedObjects)({ client, owner: address, filter });
  const policies = [];
  for (const item of data) {
    const data2 = (0, import_utils2.parseTransferPolicyCapObject)(item);
    if (data2)
      policies.push(data2);
  }
  return policies;
}
//# sourceMappingURL=transfer-policy.js.map
