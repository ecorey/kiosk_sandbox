"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var kiosk_exports = {};
__export(kiosk_exports, {
  fetchKiosk: () => fetchKiosk,
  fetchKioskExtension: () => fetchKioskExtension,
  getOwnedKiosks: () => getOwnedKiosks
});
module.exports = __toCommonJS(kiosk_exports);
var import_utils = require("@mysten/sui.js/utils");
var import_types = require("../types/index.js");
var import_utils2 = require("../utils.js");
async function fetchKiosk(client, kioskId, pagination, options) {
  const data = await (0, import_utils2.getAllDynamicFields)(client, kioskId, pagination);
  const listings = [];
  const lockedItemIds = [];
  const kioskData = (0, import_utils2.extractKioskData)(data, listings, lockedItemIds, kioskId);
  const [kiosk, listingObjects, items] = await Promise.all([
    options.withKioskFields ? (0, import_utils2.getKioskObject)(client, kioskId) : Promise.resolve(void 0),
    options.withListingPrices ? (0, import_utils2.getAllObjects)(client, kioskData.listingIds, {
      showContent: true
    }) : Promise.resolve([]),
    options.withObjects ? (0, import_utils2.getAllObjects)(client, kioskData.itemIds, options.objectOptions || { showDisplay: true }) : Promise.resolve([])
  ]);
  if (options.withKioskFields)
    kioskData.kiosk = kiosk;
  (0, import_utils2.attachListingsAndPrices)(kioskData, listings, listingObjects);
  (0, import_utils2.attachLockedItems)(kioskData, lockedItemIds);
  (0, import_utils2.attachObjects)(
    kioskData,
    items.filter((x) => !!x.data).map((x) => x.data)
  );
  return {
    data: kioskData,
    nextCursor: null,
    hasNextPage: false
  };
}
async function getOwnedKiosks(client, address, options) {
  if (!(0, import_utils.isValidSuiAddress)(address))
    return {
      nextCursor: null,
      hasNextPage: false,
      kioskOwnerCaps: [],
      kioskIds: []
    };
  const filter = {
    MatchAny: [
      {
        StructType: import_types.KIOSK_OWNER_CAP
      }
    ]
  };
  if (options?.personalKioskType) {
    filter.MatchAny.push({
      StructType: options.personalKioskType
    });
  }
  const { data, hasNextPage, nextCursor } = await client.getOwnedObjects({
    owner: address,
    filter,
    options: {
      showContent: true,
      showType: true
    },
    ...options?.pagination || {}
  });
  const kioskIdList = data?.map((x) => {
    const fields = x.data?.content?.dataType === "moveObject" ? x.data.content.fields : null;
    return fields?.cap ? fields?.cap?.fields?.for : fields?.for;
  });
  const filteredData = data.filter((x) => "data" in x).map((x) => x.data);
  return {
    nextCursor,
    hasNextPage,
    kioskOwnerCaps: filteredData.map((x, idx) => ({
      isPersonal: x.type !== import_types.KIOSK_OWNER_CAP,
      digest: x.digest,
      version: x.version,
      objectId: x.objectId,
      kioskId: kioskIdList[idx]
    })),
    kioskIds: kioskIdList
  };
}
async function fetchKioskExtension(client, kioskId, extensionType) {
  const extension = await client.getDynamicFieldObject({
    parentId: kioskId,
    name: {
      type: `0x2::kiosk_extension::ExtensionKey<${extensionType}>`,
      value: {
        dummy_field: false
      }
    }
  });
  if (!extension.data)
    return null;
  const fields = extension?.data?.content?.fields?.value?.fields;
  return {
    objectId: extension.data.objectId,
    type: extensionType,
    isEnabled: fields?.is_enabled,
    permissions: fields?.permissions,
    storageId: fields?.storage?.fields?.id?.id,
    storageSize: fields?.storage?.fields?.size
  };
}
//# sourceMappingURL=kiosk.js.map
