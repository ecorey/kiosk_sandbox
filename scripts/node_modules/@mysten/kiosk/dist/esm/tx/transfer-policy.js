import { bcs } from "@mysten/sui.js/bcs";
import { TRANSFER_POLICY_MODULE, TRANSFER_POLICY_TYPE } from "../types/index.js";
function createTransferPolicy(tx, itemType, publisher) {
  const [transferPolicy, transferPolicyCap] = createTransferPolicyWithoutSharing(
    tx,
    itemType,
    publisher
  );
  shareTransferPolicy(tx, itemType, transferPolicy);
  return transferPolicyCap;
}
function createTransferPolicyWithoutSharing(tx, itemType, publisher) {
  const [transferPolicy, transferPolicyCap] = tx.moveCall({
    target: `${TRANSFER_POLICY_MODULE}::new`,
    typeArguments: [itemType],
    arguments: [tx.object(publisher)]
  });
  return [transferPolicy, transferPolicyCap];
}
function shareTransferPolicy(tx, itemType, transferPolicy) {
  tx.moveCall({
    target: `0x2::transfer::public_share_object`,
    typeArguments: [`${TRANSFER_POLICY_TYPE}<${itemType}>`],
    arguments: [transferPolicy]
  });
}
function withdrawFromPolicy(tx, itemType, policy, policyCap, amount) {
  const amountArg = bcs.option(bcs.u64()).serialize(amount);
  const [profits] = tx.moveCall({
    target: `${TRANSFER_POLICY_MODULE}::withdraw`,
    typeArguments: [itemType],
    arguments: [tx.object(policy), tx.object(policyCap), amountArg]
  });
  return profits;
}
function confirmRequest(tx, itemType, policy, request) {
  tx.moveCall({
    target: `${TRANSFER_POLICY_MODULE}::confirm_request`,
    typeArguments: [itemType],
    arguments: [tx.object(policy), request]
  });
}
function removeTransferPolicyRule(tx, itemType, ruleType, configType, policy, policyCap) {
  tx.moveCall({
    target: `${TRANSFER_POLICY_MODULE}::remove_rule`,
    typeArguments: [itemType, ruleType, configType],
    arguments: [tx.object(policy), tx.object(policyCap)]
  });
}
export {
  confirmRequest,
  createTransferPolicy,
  createTransferPolicyWithoutSharing,
  removeTransferPolicyRule,
  shareTransferPolicy,
  withdrawFromPolicy
};
//# sourceMappingURL=transfer-policy.js.map
