import { bcs } from "@mysten/sui.js/bcs";
import { KIOSK_MODULE, KIOSK_TYPE } from "../types/index.js";
function createKiosk(tx) {
  const [kiosk, kioskOwnerCap] = tx.moveCall({
    target: `${KIOSK_MODULE}::new`
  });
  return [kiosk, kioskOwnerCap];
}
function createKioskAndShare(tx) {
  const [kiosk, kioskOwnerCap] = createKiosk(tx);
  shareKiosk(tx, kiosk);
  return kioskOwnerCap;
}
function shareKiosk(tx, kiosk) {
  tx.moveCall({
    target: `0x2::transfer::public_share_object`,
    typeArguments: [KIOSK_TYPE],
    arguments: [kiosk]
  });
}
function place(tx, itemType, kiosk, kioskCap, item) {
  tx.moveCall({
    target: `${KIOSK_MODULE}::place`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.object(item)]
  });
}
function lock(tx, itemType, kiosk, kioskCap, policy, item) {
  tx.moveCall({
    target: `${KIOSK_MODULE}::lock`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.object(policy), tx.object(item)]
  });
}
function take(tx, itemType, kiosk, kioskCap, itemId) {
  const [item] = tx.moveCall({
    target: `${KIOSK_MODULE}::take`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.pure.id(itemId)]
  });
  return item;
}
function list(tx, itemType, kiosk, kioskCap, itemId, price) {
  tx.moveCall({
    target: `${KIOSK_MODULE}::list`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.pure.id(itemId), tx.pure.u64(price)]
  });
}
function delist(tx, itemType, kiosk, kioskCap, itemId) {
  tx.moveCall({
    target: `${KIOSK_MODULE}::delist`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.pure.id(itemId)]
  });
}
function placeAndList(tx, itemType, kiosk, kioskCap, item, price) {
  tx.moveCall({
    target: `${KIOSK_MODULE}::place_and_list`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.object(item), tx.pure.u64(price)]
  });
}
function purchase(tx, itemType, kiosk, itemId, payment) {
  const [item, transferRequest] = tx.moveCall({
    target: `${KIOSK_MODULE}::purchase`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.pure.id(itemId), tx.object(payment)]
  });
  return [item, transferRequest];
}
function withdrawFromKiosk(tx, kiosk, kioskCap, amount) {
  const amountArg = bcs.option(bcs.u64()).serialize(amount);
  const [coin] = tx.moveCall({
    target: `${KIOSK_MODULE}::withdraw`,
    arguments: [tx.object(kiosk), tx.object(kioskCap), amountArg]
  });
  return coin;
}
function borrowValue(tx, itemType, kiosk, kioskCap, itemId) {
  const [item, promise] = tx.moveCall({
    target: `${KIOSK_MODULE}::borrow_val`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), tx.object(kioskCap), tx.pure.id(itemId)]
  });
  return [item, promise];
}
function returnValue(tx, itemType, kiosk, item, promise) {
  tx.moveCall({
    target: `${KIOSK_MODULE}::return_val`,
    typeArguments: [itemType],
    arguments: [tx.object(kiosk), item, promise]
  });
}
export {
  borrowValue,
  createKiosk,
  createKioskAndShare,
  delist,
  list,
  lock,
  place,
  placeAndList,
  purchase,
  returnValue,
  shareKiosk,
  take,
  withdrawFromKiosk
};
//# sourceMappingURL=kiosk.js.map
