import { lock } from "../kiosk.js";
function resolveRoyaltyRule(params) {
  const { transactionBlock: txb, itemType, price, packageId, transferRequest, policyId } = params;
  const policyObj = txb.object(policyId);
  const [amount] = txb.moveCall({
    target: `${packageId}::royalty_rule::fee_amount`,
    typeArguments: [itemType],
    arguments: [policyObj, txb.pure.u64(price || "0")]
  });
  const feeCoin = txb.splitCoins(txb.gas, [amount]);
  txb.moveCall({
    target: `${packageId}::royalty_rule::pay`,
    typeArguments: [itemType],
    arguments: [policyObj, transferRequest, feeCoin]
  });
}
function resolveKioskLockRule(params) {
  const {
    transactionBlock: txb,
    packageId,
    itemType,
    kiosk,
    kioskCap,
    policyId,
    purchasedItem,
    transferRequest
  } = params;
  if (!kiosk || !kioskCap)
    throw new Error("Missing Owned Kiosk or Owned Kiosk Cap");
  lock(txb, itemType, kiosk, kioskCap, policyId, purchasedItem);
  txb.moveCall({
    target: `${packageId}::kiosk_lock_rule::prove`,
    typeArguments: [itemType],
    arguments: [transferRequest, txb.object(kiosk)]
  });
}
function resolvePersonalKioskRule(params) {
  const { transactionBlock: txb, packageId, itemType, kiosk, transferRequest } = params;
  if (!kiosk)
    throw new Error("Missing owned Kiosk.");
  txb.moveCall({
    target: `${packageId}::personal_kiosk_rule::prove`,
    typeArguments: [itemType],
    arguments: [txb.object(kiosk), transferRequest]
  });
}
function resolveFloorPriceRule(params) {
  const { transactionBlock: txb, packageId, itemType, policyId, transferRequest } = params;
  txb.moveCall({
    target: `${packageId}::floor_price_rule::prove`,
    typeArguments: [itemType],
    arguments: [txb.object(policyId), transferRequest]
  });
}
export {
  resolveFloorPriceRule,
  resolveKioskLockRule,
  resolvePersonalKioskRule,
  resolveRoyaltyRule
};
//# sourceMappingURL=resolve.js.map
