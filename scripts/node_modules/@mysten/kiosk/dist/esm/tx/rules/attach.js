function attachKioskLockRuleTx(tx, type, policy, policyCap, packageId) {
  tx.moveCall({
    target: `${packageId}::kiosk_lock_rule::add`,
    typeArguments: [type],
    arguments: [tx.object(policy), tx.object(policyCap)]
  });
}
function attachRoyaltyRuleTx(tx, type, policy, policyCap, percentageBps, minAmount, packageId) {
  if (Number(percentageBps) < 0 || Number(percentageBps) > 1e4)
    throw new Error("Invalid basis point percentage. Use a value between [0,10000].");
  tx.moveCall({
    target: `${packageId}::royalty_rule::add`,
    typeArguments: [type],
    arguments: [
      tx.object(policy),
      tx.object(policyCap),
      tx.pure.u16(Number(percentageBps)),
      tx.pure.u64(minAmount)
    ]
  });
}
function attachPersonalKioskRuleTx(tx, type, policy, policyCap, packageId) {
  tx.moveCall({
    target: `${packageId}::personal_kiosk_rule::add`,
    typeArguments: [type],
    arguments: [tx.object(policy), tx.object(policyCap)]
  });
}
function attachFloorPriceRuleTx(tx, type, policy, policyCap, minPrice, packageId) {
  tx.moveCall({
    target: `${packageId}::floor_price_rule::add`,
    typeArguments: [type],
    arguments: [tx.object(policy), tx.object(policyCap), tx.pure.u64(minPrice)]
  });
}
export {
  attachFloorPriceRuleTx,
  attachKioskLockRuleTx,
  attachPersonalKioskRuleTx,
  attachRoyaltyRuleTx
};
//# sourceMappingURL=attach.js.map
