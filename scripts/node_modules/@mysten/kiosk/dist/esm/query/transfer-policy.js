import { isValidSuiAddress } from "@mysten/sui.js/utils";
import { bcs } from "../bcs.js";
import {
  TRANSFER_POLICY_CAP_TYPE,
  TRANSFER_POLICY_CREATED_EVENT,
  TRANSFER_POLICY_TYPE
} from "../types/index.js";
import { getAllOwnedObjects, parseTransferPolicyCapObject } from "../utils.js";
async function queryTransferPolicy(client, type) {
  const { data } = await client.queryEvents({
    query: {
      MoveEventType: `${TRANSFER_POLICY_CREATED_EVENT}<${type}>`
    }
  });
  const search = data.map((event) => event.parsedJson);
  const policies = await client.multiGetObjects({
    ids: search.map((policy) => policy.id),
    options: { showBcs: true, showOwner: true }
  });
  return policies.filter((policy) => !!policy && "data" in policy).map(({ data: policy }) => {
    if (!policy || !policy.bcs || !("bcsBytes" in policy.bcs)) {
      throw new Error(`Invalid policy: ${policy?.objectId}, expected object, got package`);
    }
    const parsed = bcs.de(TRANSFER_POLICY_TYPE, policy.bcs.bcsBytes, "base64");
    return {
      id: policy?.objectId,
      type: `${TRANSFER_POLICY_TYPE}<${type}>`,
      owner: policy?.owner,
      rules: parsed.rules,
      balance: parsed.balance
    };
  });
}
async function queryTransferPolicyCapsByType(client, address, type) {
  if (!isValidSuiAddress(address))
    return [];
  const filter = {
    MatchAll: [
      {
        StructType: `${TRANSFER_POLICY_CAP_TYPE}<${type}>`
      }
    ]
  };
  const data = await getAllOwnedObjects({
    client,
    filter,
    owner: address
  });
  return data.map((item) => parseTransferPolicyCapObject(item)).filter((item) => !!item);
}
async function queryOwnedTransferPolicies(client, address) {
  if (!isValidSuiAddress(address))
    return;
  const filter = {
    MatchAll: [
      {
        MoveModule: {
          module: "transfer_policy",
          package: "0x2"
        }
      }
    ]
  };
  const data = await getAllOwnedObjects({ client, owner: address, filter });
  const policies = [];
  for (const item of data) {
    const data2 = parseTransferPolicyCapObject(item);
    if (data2)
      policies.push(data2);
  }
  return policies;
}
export {
  queryOwnedTransferPolicies,
  queryTransferPolicy,
  queryTransferPolicyCapsByType
};
//# sourceMappingURL=transfer-policy.js.map
