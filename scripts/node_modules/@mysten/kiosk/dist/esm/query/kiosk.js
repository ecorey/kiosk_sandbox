import { isValidSuiAddress } from "@mysten/sui.js/utils";
import { KIOSK_OWNER_CAP } from "../types/index.js";
import {
  attachListingsAndPrices,
  attachLockedItems,
  attachObjects,
  extractKioskData,
  getAllDynamicFields,
  getAllObjects,
  getKioskObject
} from "../utils.js";
async function fetchKiosk(client, kioskId, pagination, options) {
  const data = await getAllDynamicFields(client, kioskId, pagination);
  const listings = [];
  const lockedItemIds = [];
  const kioskData = extractKioskData(data, listings, lockedItemIds, kioskId);
  const [kiosk, listingObjects, items] = await Promise.all([
    options.withKioskFields ? getKioskObject(client, kioskId) : Promise.resolve(void 0),
    options.withListingPrices ? getAllObjects(client, kioskData.listingIds, {
      showContent: true
    }) : Promise.resolve([]),
    options.withObjects ? getAllObjects(client, kioskData.itemIds, options.objectOptions || { showDisplay: true }) : Promise.resolve([])
  ]);
  if (options.withKioskFields)
    kioskData.kiosk = kiosk;
  attachListingsAndPrices(kioskData, listings, listingObjects);
  attachLockedItems(kioskData, lockedItemIds);
  attachObjects(
    kioskData,
    items.filter((x) => !!x.data).map((x) => x.data)
  );
  return {
    data: kioskData,
    nextCursor: null,
    hasNextPage: false
  };
}
async function getOwnedKiosks(client, address, options) {
  if (!isValidSuiAddress(address))
    return {
      nextCursor: null,
      hasNextPage: false,
      kioskOwnerCaps: [],
      kioskIds: []
    };
  const filter = {
    MatchAny: [
      {
        StructType: KIOSK_OWNER_CAP
      }
    ]
  };
  if (options?.personalKioskType) {
    filter.MatchAny.push({
      StructType: options.personalKioskType
    });
  }
  const { data, hasNextPage, nextCursor } = await client.getOwnedObjects({
    owner: address,
    filter,
    options: {
      showContent: true,
      showType: true
    },
    ...options?.pagination || {}
  });
  const kioskIdList = data?.map((x) => {
    const fields = x.data?.content?.dataType === "moveObject" ? x.data.content.fields : null;
    return fields?.cap ? fields?.cap?.fields?.for : fields?.for;
  });
  const filteredData = data.filter((x) => "data" in x).map((x) => x.data);
  return {
    nextCursor,
    hasNextPage,
    kioskOwnerCaps: filteredData.map((x, idx) => ({
      isPersonal: x.type !== KIOSK_OWNER_CAP,
      digest: x.digest,
      version: x.version,
      objectId: x.objectId,
      kioskId: kioskIdList[idx]
    })),
    kioskIds: kioskIdList
  };
}
async function fetchKioskExtension(client, kioskId, extensionType) {
  const extension = await client.getDynamicFieldObject({
    parentId: kioskId,
    name: {
      type: `0x2::kiosk_extension::ExtensionKey<${extensionType}>`,
      value: {
        dummy_field: false
      }
    }
  });
  if (!extension.data)
    return null;
  const fields = extension?.data?.content?.fields?.value?.fields;
  return {
    objectId: extension.data.objectId,
    type: extensionType,
    isEnabled: fields?.is_enabled,
    permissions: fields?.permissions,
    storageId: fields?.storage?.fields?.id?.id,
    storageSize: fields?.storage?.fields?.size
  };
}
export {
  fetchKiosk,
  fetchKioskExtension,
  getOwnedKiosks
};
//# sourceMappingURL=kiosk.js.map
